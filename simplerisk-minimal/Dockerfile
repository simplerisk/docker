# Dockerfile generated by script
ARG php_version=8.3

FROM alpine/curl:8.12.1 AS downloader

SHELL [ "/bin/ash", "-eo", "pipefail", "-c" ]

RUN mkdir -p /var/www && \
    curl -sL https://simplerisk-downloads.s3.amazonaws.com/public/bundles/simplerisk-20250826-001.tgz | tar xz -C /var/www

FROM php:${php_version}-apache

LABEL maintainer="SimpleRisk <support@simplerisk.com>"

ENV version=20250826-001

WORKDIR /var/www

SHELL [ "/bin/bash", "-o", "pipefail", "-c" ]

# Creating keyring env and installing apt dependencies
RUN mkdir -p /etc/apt/keyrings && \
    apt-get update && \
    apt-get install -y --no-install-recommends gnupg2 wget lsb-release && \
    wget -qO - https://repo.mysql.com/RPM-GPG-KEY-mysql-2023 | gpg --dearmor -o /etc/apt/keyrings/mysql.gpg && \
    # FIXME: use $(lsb_release -cs) when trixie becomes available on MySQL repos
    echo "deb [signed-by=/etc/apt/keyrings/mysql.gpg] http://repo.mysql.com/apt/debian/ bookworm mysql-8.0" | tee /etc/apt/sources.list.d/mysql.list && \
    apt-get update && \
    apt-get -y install --no-install-recommends libldap2-dev \
                                               libicu-dev \
                                               libcap2-bin \
                                               libcurl4-gnutls-dev \
                                               libpng-dev \
                                               libzip-dev \
                                               supervisor \
                                               cron \
                                               ca-certificates \
                                               mysql-community-client && \
    apt-get -y remove gnupg2 wget lsb-release && \
    rm -rf /var/lib/apt/lists/*
# Configure all PHP extensions
RUN docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu && \
    docker-php-ext-install ldap \
                           mysqli \
                           pdo_mysql \
                           curl \
                           zip \
                           gd \
                           intl
# Setting up setcap for port mapping without root and removing packages
RUN setcap CAP_NET_BIND_SERVICE=+eip /usr/sbin/apache2 && \
    chmod gu+s /usr/sbin/cron && \
    apt-get -y remove libcap2-bin && \
    apt-get -y autoremove && \
    apt-get -y purge

# Copying all files
COPY common/ /
COPY --from=downloader /var/www/simplerisk /var/www/simplerisk

# Configure Apache
RUN echo 'upload_max_filesize = 5M' >> /usr/local/etc/php/conf.d/docker-php-uploadfilesize.ini && \
	echo 'memory_limit = 256M' >> /usr/local/etc/php/conf.d/docker-php-memlimit.ini && \
	echo 'max_input_vars = 3000' >> /usr/local/etc/php/conf.d/docker-php-maxinputvars.ini && \
	echo 'log_errors = On' >> /usr/local/etc/php/conf.d/docker-php-error_logging.ini && \
	echo 'error_log = /dev/stderr' >> /usr/local/etc/php/conf.d/docker-php-error_logging.ini && \
	echo 'display_errors = Off' >> /usr/local/etc/php/conf.d/docker-php-error_logging.ini && \
# Create SSL Certificates for Apache SSL
	mkdir -p /etc/apache2/ssl/ca /etc/apache2/ssl/simplerisk && \
# Generate CA
	openssl genrsa -out /etc/apache2/ssl/ca/ca.key 4096 && \
	openssl req -x509 -new -nodes -key /etc/apache2/ssl/ca/ca.key -sha256 -days 3650 -out /etc/apache2/ssl/ca/ca.crt -subj "/CN=SimpleRisk CA" && \
# Generate certs
	openssl genrsa -out /etc/apache2/ssl/simplerisk/simplerisk.key 2048 && \
	openssl req -new -key /etc/apache2/ssl/simplerisk/simplerisk.key -out /etc/apache2/ssl/simplerisk/simplerisk.csr -subj "/CN=localhost" -addext "subjectAltName=DNS:localhost,DNS:simplerisk,IP:127.0.0.1,IP:0.0.0.0" && \
	openssl x509 -req -days 365 -in /etc/apache2/ssl/simplerisk/simplerisk.csr -CA /etc/apache2/ssl/ca/ca.crt -CAkey /etc/apache2/ssl/ca/ca.key -CAcreateserial -out /etc/apache2/ssl/simplerisk/simplerisk.crt -copy_extensions copyall && \
	cp /etc/apache2/ssl/ca/ca.crt /usr/local/share/ca-certificates/simplerisk.crt && \
	chmod 644 /usr/local/share/ca-certificates/simplerisk.crt && \
	update-ca-certificates && \
# Activate Apache modules
	a2enmod headers rewrite ssl && \
	a2enconf security && \
	sed -i 's/\(SSLProtocol\) all -SSLv3/\1 TLSv1.2/g' /etc/apache2/mods-enabled/ssl.conf && \
	sed -i 's/#\(SSLHonorCipherOrder on\)/\1/g' /etc/apache2/mods-enabled/ssl.conf && \
	sed -i 's/\(ServerTokens\) OS/\1 Prod/g' /etc/apache2/conf-enabled/security.conf && \
	sed -i 's/#\(ServerSignature\) On/\1 Off/g' /etc/apache2/conf-enabled/security.conf

# Cleanup /var/www/, creating Simplerisk user on www-data group and setting up ownerships
RUN rm -rf /var/www/html && \
	useradd -G www-data simplerisk && \
	chown -R simplerisk:www-data /var/www/simplerisk /etc/apache2 /var/run/ /var/log/apache2 && \
	chmod -R 770 /var/www/simplerisk /etc/apache2 /var/run/ /var/log/apache2 && \
	chmod 755 /entrypoint.sh /etc/apache2/foreground.sh

# Data to save
VOLUME [ "/var/log/apache2", "/etc/apache2/ssl", "/var/www/simplerisk" ]

# Using simplerisk user from here
USER simplerisk

# Setting up entrypoint
ENTRYPOINT [ "/entrypoint.sh" ]

# Ports to expose
EXPOSE 80
EXPOSE 443

HEALTHCHECK --interval=1m \
	CMD curl --fail http://localhost || exit 1

# Start Apache 
CMD ["/usr/sbin/apache2ctl", "-D", "FOREGROUND"]
